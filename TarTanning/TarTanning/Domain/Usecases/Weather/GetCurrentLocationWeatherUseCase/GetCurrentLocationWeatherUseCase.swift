//
//  GetCurrentLocationWeatherUseCase.swift
//  TarTanning
//
//  Created by taeni on 7/25/25.
//

/**
 Î™©Ï†Å: ÌòÑÏû¨ ÏúÑÏπòÏùò Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî® Î∞è UV Ï†ïÎ≥¥ Ï†úÍ≥µ
 ÏûÖÎ†•: ÌòÑÏû¨ ÏúÑÏπò (ÏúÑÎèÑ, Í≤ΩÎèÑ)
 Ï∂úÎ†•: UVÏßÄÏàò, Ïò®ÎèÑ, ÏãúÍ∞ÑÎ≥Ñ ÏòàÎ≥¥
 ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ:

 ÏúÑÏπò Í∂åÌïú ÌôïÏù∏ ‚Üí WeatherKit Ìò∏Ï∂ú
 UVÏßÄÏàò Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÎ•ò (ÎÇÆÏùå/Î≥¥ÌÜµ/ÎÜíÏùå/Îß§Ïö∞ÎÜíÏùå/ÏúÑÌóò)
 */

import Foundation
import SwiftData

final class GetCurrentLocationWeatherUseCase {
    private let weatherManager: WeatherKitManager
    private let modelContext: ModelContext
    
    init(weatherManager: WeatherKitManager = .shared, modelContext: ModelContext) {
        self.weatherManager = weatherManager
        self.modelContext = modelContext
    }
    
    func execute() async throws -> LocationWeather {
        // 1. ÎÇ†Ïßú Î≥ÄÍ≤Ω ÌôïÏù∏
        try await checkDateChange()
        
        // 2. ÏúÑÏπò Î≥ÄÍ≤Ω ÌôïÏù∏
        try await checkLocationChange()
        
        // 3. Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
        return try await getSavedLocationWeather()
    }
    
    // ÎÇ†Ïßú Î≥ÄÍ≤Ω ÌôïÏù∏ Î∞è Ï≤òÎ¶¨
    private func checkDateChange() async throws {
        let lastSavedDate = try await getLastSavedDate()
        let today = Date()
        
        if !Calendar.current.isDate(lastSavedDate, inSameDayAs: today) {
            print("üìÖ ÎÇ†Ïßú Î≥ÄÍ≤Ω Í∞êÏßÄ: ÏÉàÎ°úÏö¥ UV Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•")
            try await saveNewUVData()
        }
    }
    
    // ÏúÑÏπò Î≥ÄÍ≤Ω ÌôïÏù∏ Î∞è Ï≤òÎ¶¨
    private func checkLocationChange() async throws {
        let savedCity = try await getLastSavedCity()
        let currentCity = LocationInfo.mockSeoul.city // ÌòÑÏû¨Îäî mock
        
        if savedCity != currentCity {
            print("üìç ÏúÑÏπò Î≥ÄÍ≤Ω Í∞êÏßÄ: \(savedCity) ‚Üí \(currentCity)")
            try await saveNewUVData()
        }
    }
    
    // ÏÉàÎ°úÏö¥ UV Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    private func saveNewUVData() async throws {
        let mockLocation = LocationInfo.mockSeoul
        
        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        try await deleteOldData()
        
        // ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        let locationWeather = try await weatherManager.fetchLocationWeather(for: mockLocation)
        modelContext.insert(locationWeather)
        
        try modelContext.save()
        print("‚úÖ ÏÉàÎ°úÏö¥ UV Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å")
    }
    
    // Ï†ÄÏû•Îêú LocationWeather Î∞òÌôò
    private func getSavedLocationWeather() async throws -> LocationWeather {
        let today = Date()
        let calendar = Calendar.current
        let startOfDay = calendar.startOfDay(for: today)
        let endOfDay = calendar.date(byAdding: .day, value: 1, to: startOfDay)!
        
        let descriptor = FetchDescriptor<LocationWeather>(
            predicate: #Predicate {
                $0.date >= startOfDay && $0.date < endOfDay
            }
        )
        let data = try modelContext.fetch(descriptor)
        
        if let locationWeather = data.first {
            return locationWeather
        } else {
            // Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±
            try await saveNewUVData()
            return try await getSavedLocationWeather()
        }
    }
    
    // Ìó¨Ìçº Î©îÏÑúÎìúÎì§
    private func getLastSavedDate() async throws -> Date {
        let descriptor = FetchDescriptor<LocationWeather>(
            sortBy: [SortDescriptor(\.date, order: .reverse)]
        )
        let data = try modelContext.fetch(descriptor)
        return data.first?.date ?? Date.distantPast
    }
    
    private func getLastSavedCity() async throws -> String {
        let descriptor = FetchDescriptor<LocationWeather>(
            sortBy: [SortDescriptor(\.date, order: .reverse)]
        )
        let data = try modelContext.fetch(descriptor)
        return data.first?.city ?? "Ïïå Ïàò ÏóÜÏùå"
    }
    
    private func deleteOldData() async throws {
        let today = Date()
        let calendar = Calendar.current
        let startOfDay = calendar.startOfDay(for: today)
        let endOfDay = calendar.date(byAdding: .day, value: 1, to: startOfDay)!
        
        let descriptor = FetchDescriptor<LocationWeather>(
            predicate: #Predicate {
                $0.date >= startOfDay && $0.date < endOfDay
            }
        )
        let existingData = try modelContext.fetch(descriptor)
        
        for data in existingData {
            modelContext.delete(data)
        }
    }
}
