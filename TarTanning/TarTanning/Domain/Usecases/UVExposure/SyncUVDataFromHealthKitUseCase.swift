//
//  SyncUVDataFromHealthKitUseCase.swift
//  TarTanning
//
//  Created by Jun on 7/26/25.
//

import Foundation
import SwiftData
import HealthKit

@MainActor
final class SyncUVDataFromHealthKitUseCase {
    private let healthKitQueryFetchManager = HealthKitQueryFetchManager.shared
    private let modelContext: ModelContext
    
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
    }
    
    // MARK: - Public Methods
    
    /// HealthKitÏóêÏÑú Ïò§Îäò ÏùºÍ¥ëÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º ÎèôÍ∏∞ÌôîÌïòÏó¨ UVExposeRecordÎ°ú Ï†ÄÏû•
    func syncTodaySunlightFromHealthKit() async throws {
        print("üîÑ [SyncUVDataFromHealthKitUseCase] Syncing today's sunlight data from HealthKit")
        
        // 1. HealthKitÏóêÏÑú Ïò§ÎäòÏùò Î™®Îì† ÏÉòÌîå Í∞ÄÏ†∏Ïò§Í∏∞
        let samples = try await fetchTodaySamplesFromHealthKit()
        
        // 2. Í∏∞Ï°¥ Ïò§Îäò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú
        try await clearTodayUVData()
        
        // 3. ÏÉòÌîåÎì§ÏùÑ UVExposeRecordÎ°ú Î≥ÄÌôòÌïòÏó¨ Ï†ÄÏû•
        if !samples.isEmpty {
            try await createUVExposeRecords(from: samples)
            print("‚úÖ [SyncUVDataFromHealthKitUseCase] Successfully synced \(samples.count) samples")
        } else {
            print("üì≠ [SyncUVDataFromHealthKitUseCase] No sunlight data found for today")
        }
    }
    
    /// HealthKitÏóêÏÑú ÌäπÏ†ï Í∏∞Í∞ÑÏùò ÏùºÍ¥ëÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî
    func syncSunlightFromHealthKit(from startDate: Date, to endDate: Date) async throws {
        print("üîÑ [SyncUVDataFromHealthKitUseCase] Syncing sunlight data from \(startDate) to \(endDate)")
        
        let samples = try await fetchSamplesFromHealthKit(from: startDate, to: endDate)
        
        if !samples.isEmpty {
            try await createUVExposeRecords(from: samples)
            print("‚úÖ [SyncUVDataFromHealthKitUseCase] Successfully synced \(samples.count) samples")
        } else {
            print("üì≠ [SyncUVDataFromHealthKitUseCase] No sunlight data found for the period")
        }
    }
    
    // MARK: - Private Methods
    
    /// HealthKitÏóêÏÑú Ïò§Îäò ÏÉòÌîå Í∞ÄÏ†∏Ïò§Í∏∞
    private func fetchTodaySamplesFromHealthKit() async throws -> [HKQuantitySample] {
        return try await withCheckedThrowingContinuation { continuation in
            healthKitQueryFetchManager.delegate = HealthKitDelegate(continuation: continuation)
            Task {
                await healthKitQueryFetchManager.fetchTodaySamples()
            }
        }
    }
    
    /// HealthKitÏóêÏÑú ÌäπÏ†ï Í∏∞Í∞Ñ ÏÉòÌîå Í∞ÄÏ†∏Ïò§Í∏∞
    private func fetchSamplesFromHealthKit(from startDate: Date, to endDate: Date) async throws -> [HKQuantitySample] {
        return try await withCheckedThrowingContinuation { continuation in
            healthKitQueryFetchManager.delegate = HealthKitDelegate(continuation: continuation)
            Task {
                await healthKitQueryFetchManager.fetchSamples(from: startDate, to: endDate)
            }
        }
    }
    
    /// Ïò§Îäò UV Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
    private func clearTodayUVData() async throws {
        let today = Calendar.current.startOfDay(for: Date())
        
        // UVExposeRecord ÏÇ≠Ï†ú
        let uvRecordDescriptor = FetchDescriptor<UVExposeRecord>()
        let allUVRecords = try modelContext.fetch(uvRecordDescriptor)
        
        let todayUVRecords = allUVRecords.filter { record in
            Calendar.current.isDate(record.startDate, inSameDayAs: today)
        }
        
        for record in todayUVRecords {
            modelContext.delete(record)
        }
        
        // DailyUVExpose ÏÇ≠Ï†ú
        let dailyDescriptor = FetchDescriptor<DailyUVExpose>()
        let allDailyData = try modelContext.fetch(dailyDescriptor)
        
        let todayDailyData = allDailyData.filter { daily in
            Calendar.current.isDate(daily.date, inSameDayAs: today)
        }
        
        for daily in todayDailyData {
            modelContext.delete(daily)
        }
        
        try modelContext.save()
        print("üóëÔ∏è [SyncUVDataFromHealthKitUseCase] Cleared today's UV data")
    }
    
    /// HKQuantitySampleÎì§ÏùÑ UVExposeRecordÎ°ú Î≥ÄÌôòÌïòÏó¨ Ï†ÄÏû•
    private func createUVExposeRecords(from samples: [HKQuantitySample]) async throws {
        print("üîÑ [SyncUVDataFromHealthKitUseCase] Converting \(samples.count) samples to UVExposeRecords")
        
        // ÎÇ†ÏßúÎ≥ÑÎ°ú Í∑∏Î£πÌôî
        let groupedByDate = Dictionary(grouping: samples) { sample in
            Calendar.current.startOfDay(for: sample.startDate)
        }
        
        for (date, dateSamples) in groupedByDate {
            // Ìï¥Îãπ ÎÇ†ÏßúÏùò DailyUVExpose ÏÉùÏÑ± ÎòêÎäî Í∞ÄÏ†∏Ïò§Í∏∞
            let dailyUV = try await getOrCreateDailyUVExpose(for: date)
            
            // Í∞Å ÏÉòÌîåÏùÑ UVExposeRecordÎ°ú Î≥ÄÌôò
            for sample in dateSamples {
                let durationMinutes = sample.quantity.doubleValue(for: .minute())
                
                let uvRecord = UVExposeRecord(
                    startDate: sample.startDate,
                    endDate: sample.endDate,
                    sunlightExposureDuration: durationMinutes,
                    isSPFApplied: false // ÌòÑÏû¨Îäî SPF Ï†ÅÏö© ÏïàÌï®
                )
                
                // Í¥ÄÍ≥Ñ ÏÑ§Ï†ï
                uvRecord.dailyExposure = dailyUV
                dailyUV.exposureRecords.append(uvRecord)
                dailyUV.totalSunlightMinutes += durationMinutes
                
                modelContext.insert(uvRecord)
                
                print("üìù [SyncUVDataFromHealthKitUseCase] Created UVExposeRecord: \(durationMinutes) minutes")
            }
        }
        
        try modelContext.save()
        print("‚úÖ [SyncUVDataFromHealthKitUseCase] All UVExposeRecords saved")
    }
    
    /// DailyUVExpose ÏÉùÏÑ± ÎòêÎäî Í∞ÄÏ†∏Ïò§Í∏∞
    private func getOrCreateDailyUVExpose(for date: Date) async throws -> DailyUVExpose {
        let descriptor = FetchDescriptor<DailyUVExpose>()
        let allDailyData = try modelContext.fetch(descriptor)
        
        let existingDaily = allDailyData.first { daily in
            Calendar.current.isDate(daily.date, inSameDayAs: date)
        }
        
        if let existingDaily = existingDaily {
            return existingDaily
        } else {
            let newDaily = DailyUVExpose(date: date)
            modelContext.insert(newDaily)
            return newDaily
        }
    }
}

// MARK: - HealthKit Delegate

private class HealthKitDelegate: HealthKitQueryFetchManagerDelegate {
    private let continuation: CheckedContinuation<[HKQuantitySample], Error>
    
    init(continuation: CheckedContinuation<[HKQuantitySample], Error>) {
        self.continuation = continuation
    }
    
    func fetchManagerDidFetchSamples(_ samples: [HKQuantitySample]) {
        continuation.resume(returning: samples)
    }
    
    func fetchManagerDidFail(with error: HealthKitError) {
        continuation.resume(throwing: error)
    }
} 